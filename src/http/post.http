###
GET http://localhost:8000/posts HTTP/1.1
###
POST http://localhost:8000/posts HTTP/1.1

Content-Type: application/json

{
"postData": {
      "title": "4 Passive Income Streams for a Programmer";
        "description": "Learn how to generate passive income as a programmer. — Everybody wants to earn extra money but due to time constraints and jobs, we can not give extra time to earn extra money. Think about that you are sleeping an";
 "poster": "https://miro.medium.com/max/1400/1*5PItdRKtHIk3G70ab-Zz3g.jpeg";
  "content": `<figure class="kp kq kr ks gy kt gm gn paragraph-image"><div role="button" tabindex="0" class="ku kv dp kw cf kx"><div class="gm gn ko"><img alt="" class="cf ky kz" src="https://miro.medium.com/max/1400/1*5PItdRKtHIk3G70ab-Zz3g.jpeg" width="700" height="409" loading="lazy" role="presentation"></div></div></figure><p id="99f5" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">The React team recently announced <a class="au lw" href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html" rel="noopener ugc nofollow" target="_blank">the plan for React 18</a>, bringing a lot of cool new features like automatic batching, new suspense SSR Architecture, and new APIs that leverage concurrent rendering like the <code class="fq lx ly lz ma b">startTransition</code> API.</p><p id="05cb" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">For the past few years, the React team has been working on major features that will support concurrent rendering, those features are going to have a remarkable effect on both the user experience and the development process.</p><p id="4895" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">There are a lot of <a class="au lw" href="https://reactjs.org/docs/concurrent-mode-intro.html" rel="noopener ugc nofollow" target="_blank">resources</a> where you can learn more about concurrent React, so I’ll not cover how it works behind the scenes in depth. Instead, I’ll show you <strong class="lc ja">three practical use-cases where I leveraged the new React </strong><code class="fq lx ly lz ma b"><strong class="lc ja">startTransition</strong></code><strong class="lc ja">API to resolve major performance issues</strong>.</p><blockquote class="mb mc md"><p id="e9e6" class="la lb me lc b ld le ka lf lg lh kd li mf lk ll lm mg lo lp lq mh ls lt lu lv is gb" data-selectable-paragraph=""><strong class="lc ja"><em class="iz">Disclaimer:</em></strong></p><p id="1c30" class="la lb me lc b ld le ka lf lg lh kd li mf lk ll lm mg lo lp lq mh ls lt lu lv is gb" data-selectable-paragraph="">At the time of writing this post, React 18 is still in Alpha. You are more than welcome to explore it and play with it, but it’s not yet stable and ready for production usage.</p><p id="cddf" class="la lb me lc b ld le ka lf lg lh kd li mf lk ll lm mg lo lp lq mh ls lt lu lv is gb" data-selectable-paragraph="">In addition, all of the examples in this post are presented using Codesandbox which has a performance overhead because it runs in development mode. For the most realistic results, you can run the examples in <a class="au lw" href="https://github.com/eilonmore/react-concurrence-examples" rel="noopener ugc nofollow" target="_blank">this repo</a> in production mode.</p></blockquote><h2 id="475a" class="mi mj iz bn mk ml mm mn mo mp mq mr ms lj mt mu mv ln mw mx my lr mz na nb nc gb" data-selectable-paragraph="">A few words about the React startTransition API</h2><p id="a4e5" class="pw-post-body-paragraph la lb iz lc b ld nd ka lf lg ne kd li lj nf ll lm ln ng lp lq lr nh lt lu lv is gb" data-selectable-paragraph="">The new React <code class="fq lx ly lz ma b">startTransition</code> API will help make your application more responsive, even during large screen updates. With this new API, you can substantially improve user interactions by marking specific updates as “transitions.” React will let you provide visual feedback during a state transition and keep the browser responsive while the transition is in progress.</p><h2 id="92d9" class="mi mj iz bn mk ml mm mn mo mp mq mr ms lj mt mu mv ln mw mx my lr mz na nb nc gb" data-selectable-paragraph="">Use case#1 — Searching for Pokemon</h2><p id="f4fd" class="pw-post-body-paragraph la lb iz lc b ld nd ka lf lg ne kd li lj nf ll lm ln ng lp lq lr nh lt lu lv is gb" data-selectable-paragraph="">I love Pokemon.</p><p id="e6c0" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">That’s why I’ve decided to build a small screen where I can search for all the Pokemon in the world and get some details about them. There are a lot of Pokemon out there and I didn’t want to start messing with DOM virtualization techniques. I decided I just “<a class="au lw" href="https://www.youtube.com/watch?v=MpaHR-V_R-o" rel="noopener ugc nofollow" target="_blank">Gotta render em all</a>.”<br>That list happened to be quite big, and the search input felt a bit laggy.</p><p id="0fbc" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">Let me give you a live demonstration:</p><figure class="kp kq kr ks gy kt"><div class="m l dp"><div class="ni nj l"></div></div></figure><p id="8b3b" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">If you are working on the average computer, you probably noticed the delay while typing. If you didn’t, let me help you get off your high horse with the following trick ;)</p><ul class=""><li id="19be" class="nk nl iz lc b ld le lg lh lj nm ln nn lr no lv np nq nr ns gb" data-selectable-paragraph="">Open the developer console</li><li id="d70d" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">Click performance</li><li id="a707" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">Change CPU throttling to 4x slowdown</li></ul><figure class="kp kq kr ks gy kt gm gn paragraph-image"><div role="button" tabindex="0" class="ku kv dp kw cf kx"><div class="gm gn ny"><img alt="" class="cf ky kz" src="https://miro.medium.com/max/1400/1*O0Vh3_mOXfxDUL0zwaMR9A.png" width="700" height="183" loading="lazy" role="presentation"></div></div></figure><p id="56bf" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">Now for sure, you’ll notice the delay. This is not the optimal user experience.<br>Input typing is a sensitive UX action. The user is focused on the input while typing in it, and is expecting to get very quick feedback from the app that whatever is typed on the keyboard is displayed in that input.</p><p id="f883" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">Think about yourself as a user: isn’t it frustrating that you type something and don’t see those letters being painted until after a half-second? It immediately makes you think, “Argh, this app is so slow!”<br>It’s very important to render those UX-sensitive actions as fast as we can, and give quick feedback to the user.</p><p id="cd41" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">Now, let’s have a look at the code:</p><figure class="kp kq kr ks gy kt"><div class="m l dp"><div class="nz nj l"></div></div></figure><h2 id="8098" class="mi mj iz bn mk ml mm mn mo mp mq mr ms lj mt mu mv ln mw mx my lr mz na nb nc gb" data-selectable-paragraph="">Why is the search so laggy?</h2><p id="f79a" class="pw-post-body-paragraph la lb iz lc b ld nd ka lf lg ne kd li lj nf ll lm ln ng lp lq lr nh lt lu lv is gb" data-selectable-paragraph="">The reason for the lagginess is because we render A LOT of pokemons on each keypress. We have around 1300 pokemons at the initial render. Let’s assume we press ‘b’; after pressing this key, React recalculates all the changes against the old DOM representation, and commits those changes to the DOM accordingly. If it’s dealing with around 1300 elements, rendering takes time.<br>While React renders the new state to the DOM, interaction with the UI is completely blocked. You can’t do anything, can’t click the buttons, can’t see the “balbasuer” that you’ve just typed. Only after it finishes the rendering does the UI become fully responsive.</p><h2 id="97cf" class="mi mj iz bn mk ml mm mn mo mp mq mr ms lj mt mu mv ln mw mx my lr mz na nb nc gb" data-selectable-paragraph="">What can we do about it?</h2><p id="27f8" class="pw-post-body-paragraph la lb iz lc b ld nd ka lf lg ne kd li lj nf ll lm ln ng lp lq lr nh lt lu lv is gb" data-selectable-paragraph="">We all know that it’s a common standard to “throttle” the input’s onChange calls. That makes it call only after a specified maximum frequency, but as stated in <a class="au lw" href="https://reactjs.org/docs/concurrent-mode-intro.html" rel="noopener ugc nofollow" target="_blank">this wonderful doc</a> from React:</p><blockquote class="mb mc md"><p id="46b6" class="la lb me lc b ld le ka lf lg lh kd li mf lk ll lm mg lo lp lq mh ls lt lu lv is gb" data-selectable-paragraph="">on lower-powered devices, we’d still end up with a stutter. Both debouncing and throttling create a suboptimal user experience.</p></blockquote><p id="d378" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">And this is where React’s new <code class="fq lx ly lz ma b">startTransition</code> API comes into the picture. <br>With concurrent React, the browser can work on several state updates concurrently.<br>By using the <code class="fq lx ly lz ma b">startTransition</code> API, we can tell React:</p><p id="76d9" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph=""><mark class="wm wn pq"><em class="me">“Hey React, listen, I know you want to update this list, but right now, rendering whatever the user is typing is way more important than updating that list. PLEASE stop rendering the list for a while and focus on rendering the new key the user has just pressed! You can come back to the list later.”</em></mark></p><p id="7396" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">It’s all about prioritization.</p><h2 id="d48b" class="mi mj iz bn mk ml mm mn mo mp mq mr ms lj mt mu mv ln mw mx my lr mz na nb nc gb" data-selectable-paragraph="">Leveraging concurrent React for our example</h2><p id="0871" class="pw-post-body-paragraph la lb iz lc b ld nd ka lf lg ne kd li lj nf ll lm ln ng lp lq lr nh lt lu lv is gb" data-selectable-paragraph="">We will help React mark what is less important to render, and thus help React prioritize things.</p><p id="28cb" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">We will make the following changes:</p><ul class=""><li id="82e7" class="nk nl iz lc b ld le lg lh lj nm ln nn lr no lv np nq nr ns gb" data-selectable-paragraph="">Use the new<code class="fq lx ly lz ma b">ReactDOM.createRoot</code> instead of <code class="fq lx ly lz ma b">ReactDOM.render</code>, this is part of the upgrading process to React 18 and it will prevent console warnings.</li><li id="9e30" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">Split the <code class="fq lx ly lz ma b">text</code> state into two different states, one for the input and one for the query: <code class="fq lx ly lz ma b">text</code>and <code class="fq lx ly lz ma b">searchQuery</code>.</li><li id="4f5d" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">We will use the <code class="fq lx ly lz ma b">useTransition</code> hook that will provide us access to two important variables: <code class="fq lx ly lz ma b">startTransition</code> and <code class="fq lx ly lz ma b">isPending</code>.<br><code class="fq lx ly lz ma b">startTransition</code> is a function that we will use to tell React which renders are “less important.” <code class="fq lx ly lz ma b">isPending</code> is a boolean that tells us whether our list is pending to be rendered or not.</li><li id="d9e4" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">We will wrap the <code class="fq lx ly lz ma b">setSearchQuery</code> statement with <code class="fq lx ly lz ma b">startTransition</code>.</li><li id="60bc" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">We will pass to <code class="fq lx ly lz ma b">PokemonsCard</code> the <code class="fq lx ly lz ma b">searchQuery</code> state instead of the <code class="fq lx ly lz ma b">text</code> state.</li><li id="abe0" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">We need to wrap our pokemon list with a <code class="fq lx ly lz ma b">React.memo</code>. (<a class="au lw" href="https://reactjs.org/docs/react-api.html#reactmemo" rel="noopener ugc nofollow" target="_blank">more on that here</a>) Since React renders all the children of a parent, <code class="fq lx ly lz ma b">setText(e.target.value) </code>will cause a rerender of the list on each keypress, so we want the list to be controlled only by the <code class="fq lx ly lz ma b">searchQuery</code> state.</li><li id="382f" class="nk nl iz lc b ld nt lg nu lj nv ln nw lr nx lv np nq nr ns gb" data-selectable-paragraph="">We will use the <code class="fq lx ly lz ma b">isPending</code> state to show a nice, elegant loader near the search input that shows that the list is waiting to be rendered.</li></ul><p id="cb08" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">Switch to <code class="fq lx ly lz ma b">ReactDOM.createRoot</code> in our index.js file:</p><figure class="kp kq kr ks gy kt"><div class="m l dp"><div class="nz nj l"></div></div></figure><p id="c431" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">And our modified components:</p><figure class="kp kq kr ks gy kt"><div class="m l dp"><div class="nz nj l"></div></div></figure><h2 id="67db" class="mi mj iz bn mk ml mm mn mo mp mq mr ms lj mt mu mv ln mw mx my lr mz na nb nc gb" data-selectable-paragraph=""><strong class="ba">Drum roll please… And the result</strong></h2><figure class="kp kq kr ks gy kt"><div class="m l dp"><div class="ni nj l"></div></div></figure><p id="3e0d" class="pw-post-body-paragraph la lb iz lc b ld le ka lf lg lh kd li lj lk ll lm ln lo lp lq lr ls lt lu lv is gb" data-selectable-paragraph="">Magical, isn’t it?<br>Now React knows that rendering the user input is more important than rendering that list, and the user experience feels a lot more smooth and natural.</p></div>`;
  "tags": ["javascript", "nodejs", "typescript"];
  "reading_time": 0;
  "info": {
    "author": {
    "full_name": "Ahmet ilhan";
  "user_name": "ahmet_ilhan";
  "avatar": "https://miro.medium.com/fit/c/176/176/1*0T8vOIKgXfo7NXq1YqN4Iw.jpeg";
    };
  };
}
}